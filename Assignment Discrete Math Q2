{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPAE3dFeHnlwBaN3VFqtGyw",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Louis123-b/Practical-Discrete-Mathematics/blob/master/Assignment%20Discrete%20Math%20Q2\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Q2) Analyse the time complexity of the following algorithm\n",
        "\n",
        "A) Linear Search"
      ],
      "metadata": {
        "id": "6fdvrtexRJeg"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Linear Search Function\n",
        "def linear_search(arr, target):\n",
        "    for i in range(len(arr)):\n",
        "        if arr[i] == target:\n",
        "            return i\n",
        "    return -1\n",
        "\n",
        "# Example usage\n",
        "arr = [10, 23, 45, 70, 11, 15]\n",
        "target = 70\n",
        "\n",
        "# Perform linear search\n",
        "index = linear_search(arr, target)\n",
        "\n",
        "if index != -1:\n",
        "    print(f\"Element found at index {index}\")\n",
        "else:\n",
        "    print(\"Element not found in the array\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rOHE9DYYRPWt",
        "outputId": "affadf9e-0ed3-47f7-df84-78736d10f004"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Element found at index 3\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "b. Bubble sort"
      ],
      "metadata": {
        "id": "f8NjS_TDRWVY"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Bubble Sort Function\n",
        "def bubble_sort(arr):\n",
        "    n = len(arr)\n",
        "    for i in range(n):\n",
        "        swapped = False\n",
        "        for j in range(0, n-i-1):\n",
        "            if arr[j] > arr[j+1]:\n",
        "                arr[j], arr[j+1] = arr[j+1], arr[j]\n",
        "                swapped = True\n",
        "        if not swapped:\n",
        "            break\n",
        "\n",
        "# Example usage\n",
        "arr = [10, 23, 45, 70, 11, 15]\n",
        "bubble_sort(arr)\n",
        "\n",
        "print(\"Sorted array is:\", arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-7tW9Q_iRXCO",
        "outputId": "f420cc55-7dc8-4cea-8328-ea27a6b11d9f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sorted array is: [10, 11, 15, 23, 45, 70]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "c. Binary search"
      ],
      "metadata": {
        "id": "1J01ATriRbmd"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Binary Search Function\n",
        "def binary_search(arr, target):\n",
        "    left, right = 0, len(arr) - 1\n",
        "    while left <= right:\n",
        "        mid = (left + right) // 2\n",
        "        if arr[mid] == target:\n",
        "            return mid\n",
        "        elif arr[mid] < target:\n",
        "            left = mid + 1\n",
        "        else:\n",
        "            right = mid - 1\n",
        "    return -1\n",
        "\n",
        "# Example usage\n",
        "arr = [10, 23, 45, 70, 11, 15]\n",
        "target = 70\n",
        "\n",
        "# Perform binary search\n",
        "index = binary_search(arr, target)\n",
        "\n",
        "if index != -1:\n",
        "    print(f\"Element found at index {index}\")\n",
        "else:\n",
        "    print(\"Element not found in the array\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "F0MnglH3Re6C",
        "outputId": "e3cbf792-ffdc-4f0b-8c92-a2ac09751dcf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Element not found in the array\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "d. Radix sort"
      ],
      "metadata": {
        "id": "tm9zMZ8vRjnl"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Counting Sort Function for Radix Sort\n",
        "def counting_sort(arr, exp):\n",
        "    n = len(arr)\n",
        "    output = [0] * n\n",
        "    count = [0] * 10\n",
        "\n",
        "    for i in range(n):\n",
        "        index = arr[i] // exp\n",
        "        count[index % 10] += 1\n",
        "\n",
        "    for i in range(1, 10):\n",
        "        count[i] += count[i - 1]\n",
        "\n",
        "    i = n - 1\n",
        "    while i >= 0:\n",
        "        index = arr[i] // exp\n",
        "        output[count[index % 10] - 1] = arr[i]\n",
        "        count[index % 10] -= 1\n",
        "        i -= 1\n",
        "\n",
        "    for i in range(n):\n",
        "        arr[i] = output[i]\n",
        "\n",
        "# Radix Sort Function\n",
        "def radix_sort(arr):\n",
        "    max1 = max(arr)\n",
        "    exp = 1\n",
        "    while max1 // exp > 0:\n",
        "        counting_sort(arr, exp)\n",
        "        exp *= 10\n",
        "\n",
        "# Example usage\n",
        "arr = [10, 23, 45, 70, 11, 15]\n",
        "radix_sort(arr)\n",
        "\n",
        "print(\"Sorted array is:\", arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "Pai7OLBcRts3",
        "outputId": "d60c3d85-c9dd-4de3-f913-a7bca3437115"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sorted array is: [10, 11, 15, 23, 45, 70]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "e. Heap sort"
      ],
      "metadata": {
        "id": "xgfPx6swRxNL"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Heapify function to maintain heap property\n",
        "def heapify(arr, n, i):\n",
        "    largest = i\n",
        "    left = 2 * i + 1\n",
        "    right = 2 * i + 2\n",
        "\n",
        "    if left < n and arr[i] < arr[left]:\n",
        "        largest = left\n",
        "\n",
        "    if right < n and arr[largest] < arr[right]:\n",
        "        largest = right\n",
        "\n",
        "    if largest != i:\n",
        "        arr[i], arr[largest] = arr[largest], arr[i]\n",
        "        heapify(arr, n, largest)\n",
        "\n",
        "# Heap Sort function\n",
        "def heap_sort(arr):\n",
        "    n = len(arr)\n",
        "\n",
        "    # Build a max heap\n",
        "    for i in range(n // 2 - 1, -1, -1):\n",
        "        heapify(arr, n, i)\n",
        "\n",
        "    # Extract elements from heap one by one\n",
        "    for i in range(n-1, 0, -1):\n",
        "        arr[i], arr[0] = arr[0], arr[i]\n",
        "        heapify(arr, i, 0)\n",
        "\n",
        "# Example usage\n",
        "arr = [10, 23, 45, 70, 11, 15]\n",
        "heap_sort(arr)\n",
        "\n",
        "print(\"Sorted array is:\", arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rivrQH5HRx4M",
        "outputId": "c1905dc6-4290-4572-9753-7f031b8967ad"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Sorted array is: [10, 11, 15, 23, 45, 70]\n"
          ]
        }
      ]
    }
  ]
}